#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <fcntl.h>

#define MAX_INPUT_SIZE 1024
#define MAX_ARG_SIZE 100

void handle_sigchld(int sig) {
    int status;
    pid_t pid;
    while ((pid = waitpid(-1, &status, WNOHANG)) > 0) {
        FILE *log = fopen("shell_log.txt", "a");
        if (log) {
            fprintf(log, "Child process %d was terminated\n", pid);
            fclose(log);
        }
    }
}

void execute_command(char **args, int background) {
    pid_t pid = fork();
    if (pid == 0) {
        execvp(args[0], args);
        perror("Execution failed");
        exit(1);
    } else if (pid > 0) {
        if (!background) {
            waitpid(pid, NULL, 0);
        }
    } else {
        perror("Fork failed");
    }
}

void change_directory(char *path) {
    if (!path || strcmp(path, "~") == 0) {
        path = getenv("HOME");
    }
    if (chdir(path) != 0) {
        perror("cd failed");
    }
}

void export_variable(char *assignment) {
    char *name = strtok(assignment, "=");
    char *value = strtok(NULL, "");
    if (name && value) {
        setenv(name, value, 1);
    } else {
        fprintf(stderr, "export: invalid assignment\n");
    }
}

void shell() {
    char input[MAX_INPUT_SIZE];
    char *args[MAX_ARG_SIZE];
    signal(SIGCHLD, handle_sigchld);

    while (1) {
        printf("shell> ");
        fflush(stdout);
        if (!fgets(input, MAX_INPUT_SIZE, stdin)) break;

        input[strcspn(input, "\n")] = 0;
        if (strlen(input) == 0) continue;

        int background = 0;
        if (input[strlen(input) - 1] == '&') {
            background = 1;
            input[strlen(input) - 1] = 0;
        }

        int i = 0;
        char *token = strtok(input, " ");
        while (token) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        if (strcmp(args[0], "exit") == 0) {
            exit(0);
        } else if (strcmp(args[0], "cd") == 0) {
            change_directory(args[1]);
        } else if (strcmp(args[0], "echo") == 0) {
            for (int j = 1; args[j]; j++) {
                if (args[j][0] == '$') {
                    char *var_value = getenv(args[j] + 1);
                    if (var_value) {
                        printf("%s ", var_value);
                    }
                } else {
                    printf("%s ", args[j]);
                }
            }
            printf("\n");
        } else if (strcmp(args[0], "export") == 0) {
            if (args[1]) {
                export_variable(args[1]);
            } else {
                fprintf(stderr, "export: missing argument\n");
            }
        } else {
            execute_command(args, background);
        }
    }
}

int main() {
    shell();
    return 0;
}
